import aiogram.utils.markdown as md
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.utils import executor
from peewee import *
import csv
import pandas as pd


if True:
    bot = Bot(token = '5911708501:AAEQb4eMCorzrO601whwalTovvQmfttKo0A')
    #dp = Dispatcher(bot)
    storage = MemoryStorage()
    dp = Dispatcher(bot, storage=storage)
    card = ""
    cards = {"DT": "–î–µ–±–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –¢–∏–Ω—å–∫–æ—Ñ—Ñ",
             "CT": "–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –¢–∏–Ω—å–∫–æ—Ñ—Ñ",
             "DA": "–î–µ–±–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ê–ª—å—Ñ–∞",
             "CA": "–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –ê–ª—å—Ñ–∞",
             "DO": "–î–µ–±–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –û—Ç–∫—Ä—ã—Ç–∏–µ",
             "CO": "–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –û—Ç–∫—Ä—ã—Ç–∏–µ",
             "DM": "–î–µ–±–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ú–æ—Å–∫–æ–≤—Å–∫–∏–π –ö—Ä–µ–¥–∏—Ç–Ω—ã–π –ë–∞–Ω–∫",
             "CM": "–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –ú–æ—Å–∫–æ–≤—Å–∫–∏–π –ö—Ä–µ–¥–∏—Ç–Ω—ã–π –ë–∞–Ω–∫",
    }


    #df = pd.DataFrame({"name": [], "number": [], "card": []})

    df = pd.read_csv("users.csv", index_col=[0])

    sl = {"name": "", "number": ""}

    text={
        "Welcome": "",

        "HowWorks": "üü¢  –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç? \n –í –æ—Å–Ω–æ–≤–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –ª–µ–∂–∏—Ç –∞–∫—Ü–∏—è ¬´–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞¬ª, –ø—Ä–æ–≤–æ–¥–∏–º–∞—è –º–Ω–æ–≥–∏–º–∏ —Ä–æ—Å—Å–∏–π—Å–∫–∏–º–∏ –±–∞–Ω–∫–∞–º–∏ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤. \
        \n –ü–æ —ç—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ, –ø—Ä–∏–≤–æ–¥—è—â–∞—è —Å—Ç–æ—Ä–æ–Ω–∞, –∫–æ—Ç–æ—Ä–æ–π —è–≤–ª—è–µ—Ç—Å—è –¥–∞–Ω–Ω—ã–π –±–æ—Ç, –ø–æ–ª—É—á–∞–µ—Ç –¥–µ–Ω–µ–∂–Ω–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. \
        \n –î–∞–Ω–Ω–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É—Å–ª–æ–≤–∏–π –∞–∫—Ü–∏–∏ ¬´–ø—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞¬ª, —Å –Ω–∏–º–∏ –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—á–µ—Ç–∞/–∫–∞—Ä—Ç—ã. \
        \n –ü—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –Ω–∞ –ª—å–≥–æ—Ç–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ–º –∏–ª–∏ –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º –∫—ç—à–±–µ–∫–æ–º. \
        \n üü¢ –ü–û–ß–ï–ú–£ –ò–ú–ï–ù–ù–û –≠–¢–û–¢ –ë–û–¢? \
        \n –ü–æ–∑–≤–æ–ª—è–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—å —Å—á–µ—Ç –Ω–∞ –≤—ã–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö, –Ω–æ –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å —Å —ç—Ç–æ–≥–æ \
        \n –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç, –∫—Ç–æ –æ—Ç–∫—Ä—ã–ª —Å—á–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω–∏–ª —É—Å–ª–æ–≤–∏—è –ø–æ –Ω–∞—à–∏–º —Å—Å—ã–ª–∫–∞–º \
        \n –ü–ª–∞—Ç–∏—Ç 70 % –æ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤, –í–ê–ú \
        \n üü¢ –í–ê–ú –ù–£–ñ–ù–û: \
        \n1. –í—ã–±—Ä–∞—Ç—å –∂–µ–ª–∞–µ–º—ã–π –±–∞–Ω–∫ –∏ –∫–∞—Ä—Ç—É; \
        \n2. –û–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –∏ –ø–æ–ª—É—á–∞–µ–º—ã–º–∏ –±–æ–Ω—É—Å–∞–º–∏; \
        \n3. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å(—ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –±—ã—Å—Ç—Ä–µ–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ —ç—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã, —Å–æ–∑–¥–∞–ª–∏ –∫–∞—Ä—Ç—É –ø–æ –Ω–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤–∞–º –¥–µ–Ω—å–≥–∏); \
        \n4. –û—Ç–∫—Ä—ã—Ç—å —Å—á–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è; \
        \n5. –ë–æ—Ç –ø–æ–ª—É—á–∏—Ç –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–≤–µ–¥–µ—Ç 70% —Å—É–º–º—ã –ø–æ –≤–∞—à–∏–º –±–∞–Ω–∫–æ–≤—Å–∫–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º, —É–∫–∞–∑–∞–Ω–Ω—ã–º –≤ –ø—Ä–æ—Ñ–∏–ª–µ; \
        \n ‚ö†Ô∏è–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã‚ö†Ô∏è\
        \n –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è–•–∞–ª—è–≤–∞–ë–æ—Ç –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –º—ã –Ω–∏–∫–∞–∫ –Ω–µ —Å–º–æ–∂–µ–º –≤–∞–º –ø–æ–º–æ—á—å",


        "Tinkoff": "üü° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –ø–æ –Ω–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ, —É –≤–∞—Å –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã —Å—á–µ—Ç–∞ –∏ –∫–∞—Ä—Ç—ã —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ ¬´–¢–∏–Ω—å–∫–æ—Ñ—Ñ¬ª. –ï—Å–ª–∏ –≤—ã —É–∂–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª–∏ –≤ –∞–∫—Ü–∏–∏ ¬´–ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞¬ª, —Ç–æ –Ω—É–∂–Ω–æ,\
    —á—Ç–æ–±—ã —Å —Ç–µ—Ö –ø–æ—Ä –ø—Ä–æ—à–ª–æ –Ω–µ –º–µ–Ω—å—à–µ –≥–æ–¥–∞",
        "Alpha": "üü° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –ø–æ –Ω–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ, —É –≤–∞—Å –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã —Å—á–µ—Ç–∞ –∏ –∫–∞—Ä—Ç—ã —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ ¬´–ê–ª—å—Ñ–∞ –ë–∞–Ω–∫–µ¬ª.",
        "Open": "üü° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –ø–æ –Ω–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ, —É –≤–∞—Å –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã —Å—á–µ—Ç–∞ –∏ –∫–∞—Ä—Ç—ã —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ ¬´–ë–∞–Ω–∫–µ –û—Ç–∫—Ä—ã—Ç–∏–µ¬ª.",
        "MosCard": "üü° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–∞ –ø–æ –Ω–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ, —É –≤–∞—Å –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã —Å—á–µ—Ç–∞ –∏ –∫–∞—Ä—Ç—ã —Ç–æ–π –∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ ¬´–ú–æ—Å–∫–æ–≤—Å–∫–æ–º –ö—Ä–µ–¥–∏—Ç–Ω–æ–º –ë–∞–Ω–∫–µ¬ª",


        "AttentionTinkoff": "",
        "AttentionAlpha": "",
        "AttentionOpen": "",
        "AttentionMos": "",


        "DebetTinkoff": "üü°–î–µ–±–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞ Tinkoff Black \n\
        \n–£–°–õ–û–í–ò–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø: \
        \n1. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É, —Å–æ–≤–µ—Ä—à–∏–≤ –ø–æ–∫—É–ø–∫–∏ –Ω–∞ 300 —Ä—É–±–ª–µ–π. \n\
        \n–í–û–ó–ù–ê–ì–†–ê–ñ–î–ï–ù–ò–Ø: \
        \n1. 300 —Ä—É–±–ª–µ–π; \
        \n2. –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –∫—ç—à–±–µ–∫; \
        \n3. –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –Ω–∞–≤—Å–µ–≥–¥–∞. \n\
        \n–ü–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º —Å—á–µ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —É–±–µ–¥–∏—Ç—å—Å—è –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—á–µ—Ç",

        "CreditTinkoff": "üü°–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ Tinkoff Platinum \
        \n–í–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è 18+ \n\
        \n–£–°–õ–û–í–ò–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø: \
        \n1. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É, —Å–æ–≤–µ—Ä—à–∏–≤ –ø–æ–∫—É–ø–∫–∏ –Ω–∞ 1500 —Ä—É–±–ª–µ–π. \n \
        \n–í–û–ó–ù–ê–ì–†–ê–ñ–î–ï–ù–ò–Ø: \
        \n1. 1500 —Ä—É–±–ª–µ–π; \
        \n2. –ü–æ–≤—ã—à–µ–Ω–Ω—ã–π –∫—ç—à–±–µ–∫; \
        \n3. –ë–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –Ω–∞–≤—Å–µ–≥–¥–∞. \n\
        \n–ü–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º —Å—á–µ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —É–±–µ–¥–∏—Ç—å—Å—è –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—á–µ—Ç–∞.",

        "DebetAlpha": "T",

        "CreditAlpha": "T",

        "DebetOpen": "üü°–î–µ–±–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –û—Ç–∫—Ä—ã—Ç–∏–µ \n\
        \n–£–°–õ–û–í–ò–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø: \
        \n1. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É, —Å–æ–≤–µ—Ä—à–∏–≤ –ø–æ–∫—É–ø–∫–∏ –Ω–∞ 1500 —Ä—É–±–ª–µ–π –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω–µ–π\n\
        \n–í–û–ó–ù–ê–ì–†–ê–ñ–î–ï–ù–ò–Ø: \
        \n1. 500 –±–∞–ª–ª–æ–≤ (1 –±–∞–ª–ª = 1 —Ä—É–±–ª—å); \
        \n2. 500 —Ä—É–±–ª–µ–π.\n\
        \n–ü–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º —Å—á–µ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —É–±–µ–¥–∏—Ç—å—Å—è –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—á–µ—Ç–∞",

        "CreditOpen": "üü°–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –û—Ç–∫—Ä—ã—Ç–∏–µ \
        \n –í–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è 18+\n\
        \n –£–°–õ–û–í–ò–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø: \
        \n 1. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É, —Å–æ–≤–µ—Ä—à–∏–≤ –ø–æ–∫—É–ø–∫–∏ –Ω–∞ 3000 —Ä—É–±–ª–µ–π –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω–µ–π; \n\
        \n –í–û–ó–ù–ê–ì–†–ê–ñ–î–ï–ù–ò–Ø:\
        \n 1. 3000 –±–∞–ª–ª–æ–≤ (1 –±–∞–ª–ª = 1 —Ä—É–±–ª—å); \
        \n 2. 1200 —Ä—É–±–ª–µ–π \n\
        \n –ü–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º —Å—á–µ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —É–±–µ–¥–∏—Ç—å—Å—è –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—á–µ—Ç–∞",

        "DebetMos": "üü°–î–µ–±–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ú–æ—Å–∫–∞—Ä—Ç–∞\n\
        \n–£–°–õ–û–í–ò–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ë–û–ù–£–°–ê: \
        \n1. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É, —Å–æ–≤–µ—Ä—à–∏–≤ –ø–æ–∫—É–ø–∫—É;\
        \n2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ ¬´–ú–ö–ë –ë–æ–Ω—É—Å¬ª.\n\
        \n–í–û–ó–ù–ê–ì–†–ê–ñ–î–ï–ù–ò–ï:\
        \n1. 500 –±–∞–ª–ª–æ–≤ (1 –±–∞–ª–ª = 1 —Ä—É–±–ª—å);\
        \n2. 500 —Ä—É–±–ª–µ–π.\
        \n–ü–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º —Å—á–µ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —É–±–µ–¥–∏—Ç—å—Å—è –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—á–µ—Ç–∞\
        \n\n\nüü°–î–µ–±–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ú–æ—Å–∫–∞—Ä—Ç–∞ Black \n\
        \n –£–°–õ–û–í–ò–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ë–û–ù–£–°–ê: \
        \n1. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É, —Å–æ–≤–µ—Ä—à–∏–≤ –ø–æ–∫—É–ø–∫—É;\
        \n2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ ¬´–ú–ö–ë –ë–æ–Ω—É—Å¬ª.\n\
        \n–í–û–ó–ù–ê–ì–†–ê–ñ–î–ï–ù–ò–ï:\
        \n1. 1000 –±–∞–ª–ª–æ–≤ (1 –±–∞–ª–ª = 1 —Ä—É–±–ª—å);\
        \n2. 400 —Ä—É–±–ª–µ–π.\n\
        \n–ü–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º —Å—á–µ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —É–±–µ–¥–∏—Ç—å—Å—è –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—á–µ—Ç–∞",



        "CreditMos": "üü°–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ ¬´–ú–æ–∂–Ω–æ –±–æ–ª—å—à–µ¬ª\
        \n–°—Ç—Ä–æ–≥–æ 18+\n\
        \n–£–°–õ–û–í–ò–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ë–û–ù–£–°–ê:\
        \n1. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É, —Å–æ–≤–µ—Ä—à–∏–≤ –ø–æ–∫—É–ø–∫—É\
        \n2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ ¬´–ú–ö–ë –ë–æ–Ω—É—Å¬ª\n\
        \n–í–û–ó–ù–ê–ì–†–ê–ñ–î–ï–ù–ò–ï:\
        \n1. 1000 –±–∞–ª–ª–æ–≤ (1 –±–∞–ª–ª = 1 —Ä—É–±–ª—å);\
        \n2. 400 —Ä—É–±–ª–µ–π.\n\
        \n–ü–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º —Å—á–µ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —É–±–µ–¥–∏—Ç—å—Å—è –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—á–µ—Ç–∞",


        "inputname": "–í–≤–µ–¥–∏—Ç–µ –§–ò–û:",
        "number": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:"
    }

class Form(StatesGroup):
    card = State()
    name = State()
    age = State()


def start_keyboard():
    buttons = [
        [
            types.InlineKeyboardButton(text="–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?", callback_data="HowWorks"),
            types.InlineKeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥ –±–∞–Ω–∫–æ–≤", callback_data="catalog")
        ],
        [types.InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/BankfreebieHelp")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

def return_keyboard():
    buttons = [
        [
            types.InlineKeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥ –±–∞–Ω–∫–æ–≤", callback_data="catalog")
        ],
        [types.InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/BankfreebieHelp")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

def reply_keyboard():
    kb = [
        [
            types.KeyboardButton(text="/start")]]
    keyboard = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)
    return keyboard

def bank_keyboard():
    buttons = [
        [
            types.InlineKeyboardButton(text="–¢–∏–Ω—å–∫–æ—Ñ—Ñ",
                                       callback_data="tinkoff"),
            types.InlineKeyboardButton(text="–ê–ª—å—Ñ–∞", callback_data="alpha")
        ],
        [
            types.InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç–∏–µ",
                                       callback_data="open"),
            types.InlineKeyboardButton(text="–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –∫—Ä–µ–¥–∏—Ç–Ω—ã–π –±–∞–Ω–∫", callback_data="Mos")
        ],
        [types.InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url = "https://t.me/BankfreebieHelp")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

def choose_card(bank):
    buttons = [
                  [
                      types.InlineKeyboardButton(text="–î–µ–±–µ—Ç–æ–≤–∞—è",
                                                 callback_data="Debet"+str(bank)),
                      types.InlineKeyboardButton(text="–ö—Ä–µ–¥–∏—Ç–Ω–∞—è", callback_data="Credit"+str(bank))
                  ],
                [
                    types.InlineKeyboardButton(text="–ú–µ–Ω—é",
                                               callback_data="Menu"),
                    types.InlineKeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥ –±–∞–Ω–∫–æ–≤", callback_data="catalog")
                ],

        [types.InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/BankfreebieHelp")]
            ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

def debet_tinkoff():
    buttons = [

        [
            types.InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ",
                                       callback_data="DataDT"),
        ],

        [types.InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/BankfreebieHelp")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

def credit_tinkoff():
    buttons = [

        [
            types.InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ",
                                       callback_data="DataCT"),
        ],

        [types.InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/BankfreebieHelp")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

def debet_alpha():
    buttons = [

        [
            types.InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ",
                                       callback_data="DataDA"),
        ],

        [types.InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/BankfreebieHelp")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

def credit_alpha():
    buttons = [

        [
            types.InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ",
                                       callback_data="DataCA"),
        ],

        [types.InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/BankfreebieHelp")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

def debet_open():
    buttons = [

        [
            types.InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ",
                                       callback_data="DataDO"),
        ],

        [types.InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/BankfreebieHelp")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

def credit_open():
    buttons = [

        [
            types.InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ",
                                       callback_data="DataCO"),
        ],

        [types.InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/BankfreebieHelp")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

def debet_mos():
    buttons = [

        [
            types.InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ",
                                       callback_data="DataDM"),
        ],

        [types.InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/BankfreebieHelp")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

def credit_mos():
    buttons = [

        [
            types.InlineKeyboardButton(text="–í–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ",
                                       callback_data="DataCM"),
        ],

        [types.InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/BankfreebieHelp")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

def confirm_keyboard():
    buttons = [

        [
            types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                                       callback_data="confirm"),
        ],

        [
            types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ",
                                       callback_data="change"),
        ],

        [
            types.InlineKeyboardButton(text="–ö–∞—Ç–∞–ª–æ–≥ –±–∞–Ω–∫–æ–≤",
                                       callback_data="catalog"),
        ],

        [types.InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/BankfreebieHelp")]
    ]
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


@dp.message_handler(commands=['start'])
async def process_command_1(message: types.Message):
    print("–¢—ã–∫ —Å—Ç–∞—Ä—Ç " + str(message.chat.id))
    await bot.send_message(chat_id = message.chat.id, text = "üü° –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è–•–∞–ª—è–≤–∞–ë–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤—ã–≥–æ–¥–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å —Å—á–µ—Ç –≤ –±–∞–Ω–∫–µ", reply_markup=start_keyboard())


@dp.callback_query_handler(lambda c: c.data == 'Menu')
async def process_callback_menu(callback_query: types.CallbackQuery):
    print("–¢—ã–∫ 1 " + str(callback_query.chat_instance))
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, 'üü° –í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è–•–∞–ª—è–≤–∞–ë–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤—ã–≥–æ–¥–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å —Å—á–µ—Ç –≤ –±–∞–Ω–∫–µ', reply_markup=start_keyboard())

@dp.callback_query_handler(lambda c: c.data == 'HowWorks')
async def process_callback_menu(callback_query: types.CallbackQuery):
    print("–¢—ã–∫ 0 " + str(callback_query.chat_instance))
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, text["HowWorks"], reply_markup=return_keyboard())

@dp.callback_query_handler(lambda c: c.data == 'catalog')
async def process_callback_catalog(callback_query: types.CallbackQuery):
    print("–¢—ã–∫ 2 " + str(callback_query.chat_instance))
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, 'üü° –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –±–∞–Ω–∫:', reply_markup=bank_keyboard())

@dp.callback_query_handler(lambda c: c.data == 'tinkoff')
async def process_callback_tinkoff(callback_query: types.CallbackQuery):
    print("–¢—ã–∫ 3 " + str(callback_query.chat_instance))
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, text["Tinkoff"], reply_markup=choose_card("Tinkoff"))

@dp.callback_query_handler(lambda c: c.data == 'alpha')
async def process_callback_alpha(callback_query: types.CallbackQuery):
    print("–¢—ã–∫ 4 " + str(callback_query.chat_instance))
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, text["Alpha"], reply_markup=choose_card("Alpha"))

@dp.callback_query_handler(lambda c: c.data == 'open')
async def process_callback_button1(callback_query: types.CallbackQuery):
    print("–¢—ã–∫ 5 " + str(callback_query.chat_instance))
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, text["Open"], reply_markup=choose_card("Open"))

@dp.callback_query_handler(lambda c: c.data == 'Mos')
async def process_callback_button1(callback_query: types.CallbackQuery):
    print("–¢—ã–∫ 6 " + str(callback_query.chat_instance))
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, text["MosCard"], reply_markup=choose_card("Mos"))


#–î–µ–±–µ—Ç–æ–≤–∞—è –∏–ª–∏ –ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞
@dp.callback_query_handler(lambda c: c.data == 'DebetTinkoff')
async def process_callback_button1(callback_query: types.CallbackQuery):
    print("–¢—ã–∫ 7 " + str(callback_query.chat_instance))
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, text["DebetTinkoff"], reply_markup=debet_tinkoff())

@dp.callback_query_handler(lambda c: c.data == 'CreditTinkoff')
async def process_callback_button1(callback_query: types.CallbackQuery):
    print("–¢—ã–∫ 8 " + str(callback_query.chat_instance))
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, text["CreditTinkoff"], reply_markup=credit_tinkoff())

@dp.callback_query_handler(lambda c: c.data == 'DebetAlpha')
async def process_callback_button1(callback_query: types.CallbackQuery):
    print("–¢—ã–∫ 9 " + str(callback_query.chat_instance))
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, text["DebetAlpha"], reply_markup=debet_alpha())

@dp.callback_query_handler(lambda c: c.data == 'CreditAlpha')
async def process_callback_button1(callback_query: types.CallbackQuery):
    print("–¢—ã–∫ 10 " + str(callback_query.chat_instance))
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, text["CreditAlpha"], reply_markup=credit_alpha())

@dp.callback_query_handler(lambda c: c.data == 'DebetOpen')
async def process_callback_button1(callback_query: types.CallbackQuery):
    print("–¢—ã–∫ 11 " + str(callback_query.chat_instance))
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, text["DebetOpen"], reply_markup=debet_open())

@dp.callback_query_handler(lambda c: c.data == 'CreditOpen')
async def process_callback_button1(callback_query: types.CallbackQuery):
    print("–¢—ã–∫ 12 " + str(callback_query.chat_instance))
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, text["CreditOpen"], reply_markup=credit_open())

@dp.callback_query_handler(lambda c: c.data == 'DebetMos')
async def process_callback_button1(callback_query: types.CallbackQuery):
    print("–¢—ã–∫ 11 " + str(callback_query.chat_instance))
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, text["DebetMos"], reply_markup=debet_mos())

@dp.callback_query_handler(lambda c: c.data == 'CreditMos')
async def process_callback_button1(callback_query: types.CallbackQuery):
    print("–¢—ã–∫ 12 " + str(callback_query.chat_instance))
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, text["CreditMos"], reply_markup=credit_mos())





#–í–≤–æ–¥–∏–º –§–ò–û
@dp.callback_query_handler(lambda c: c.data == 'DataDT')
async def process_callback_button1(callback_query: types.CallbackQuery):
    global card
    card = "DT"
    print("–¢—ã–∫ 13 " + str(callback_query.chat_instance))
    await bot.answer_callback_query(callback_query.id)
    await Form.name.set()
    await bot.send_message(callback_query.from_user.id, text["inputname"])

#–í–≤–æ–¥–∏–º –§–ò–û
@dp.callback_query_handler(lambda c: c.data == 'Data–°T')
async def process_callback_button1(callback_query: types.CallbackQuery):
    global card
    card = "CT"
    print("–¢—ã–∫ 14 " + str(callback_query.chat_instance))
    await bot.answer_callback_query(callback_query.id)
    await Form.name.set()
    await bot.send_message(callback_query.from_user.id, text["inputname"])

#–í–≤–æ–¥–∏–º –§–ò–û
@dp.callback_query_handler(lambda c: c.data == 'DataDA')
async def process_callback_button1(callback_query: types.CallbackQuery):
    global card
    card = "DA"
    print("–¢—ã–∫ 15 " + str(callback_query.chat_instance))
    await bot.answer_callback_query(callback_query.id)
    await Form.name.set()
    await bot.send_message(callback_query.from_user.id, text["inputname"])

#–í–≤–æ–¥–∏–º –§–ò–û
@dp.callback_query_handler(lambda c: c.data == 'DataCA')
async def process_callback_button1(callback_query: types.CallbackQuery):
    global card
    card = "CA"
    print("–¢—ã–∫ 16 " + str(callback_query.chat_instance))
    await bot.answer_callback_query(callback_query.id)
    await Form.name.set()
    await bot.send_message(callback_query.from_user.id, text["inputname"])

#–í–≤–æ–¥–∏–º –§–ò–û
@dp.callback_query_handler(lambda c: c.data == 'DataDO')
async def process_callback_button1(callback_query: types.CallbackQuery):
    global card
    card = "DO"
    print("–¢—ã–∫ 17 " + str(callback_query.chat_instance))
    await bot.answer_callback_query(callback_query.id)
    await Form.name.set()
    await bot.send_message(callback_query.from_user.id, text["inputname"])

#–í–≤–æ–¥–∏–º –§–ò–û
@dp.callback_query_handler(lambda c: c.data == 'DataCO')
async def process_callback_button1(callback_query: types.CallbackQuery):
    global card
    card = "CO"
    print("–¢—ã–∫ 18 " + str(callback_query.chat_instance))
    await bot.answer_callback_query(callback_query.id)
    await Form.name.set()
    await bot.send_message(callback_query.from_user.id, text["inputname"])

#–í–≤–æ–¥–∏–º –§–ò–û
@dp.callback_query_handler(lambda c: c.data == 'DataDM')
async def process_callback_button1(callback_query: types.CallbackQuery):
    global card
    card = "DM"
    print("–¢—ã–∫ 19 " + str(callback_query.chat_instance))
    await bot.answer_callback_query(callback_query.id)
    await Form.name.set()
    await bot.send_message(callback_query.from_user.id, text["inputname"])

#–í–≤–æ–¥–∏–º –§–ò–û
@dp.callback_query_handler(lambda c: c.data == 'DataCM')
async def process_callback_button1(callback_query: types.CallbackQuery):
    global card
    card = "CM"
    print("–¢—ã–∫ 20 " + str(callback_query.chat_instance))
    await bot.answer_callback_query(callback_query.id)
    await Form.name.set()
    await bot.send_message(callback_query.from_user.id, text["inputname"])


# –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–º–µ–Ω—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥—É–º–∞–ª –∑–∞–ø–æ–ª–Ω—è—Ç—å
@dp.message_handler(state='*', commands='cancel')
@dp.message_handler(Text(equals='–æ—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.finish()
    await message.reply('–û–ö')


# –°—é–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç–≤–µ—Ç —Å –∏–º–µ–Ω–µ–º
@dp.message_handler(state=Form.name)
async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
        sl["name"] = data["name"]
    await Form.next()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:")


# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
@dp.message_handler(lambda message: not message.text.isdigit(), state=Form.age)
async def process_age_invalid(message: types.Message):
    return await message.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /cancel")



# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç, –≤—ã–≤–æ–¥–∏–º –∞–Ω–∫–µ—Ç—É
@dp.message_handler(state=Form.age)
async def process_gender(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        try:
            data["card"] = card
            data['number'] = message.text
            sl["number"] = data['number']
            sl["card"] = card
            markup = types.ReplyKeyboardRemove()

            await bot.send_message(
                message.chat.id,
                md.text(
                    md.text("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ: \n"),
                    md.text('–§–ò–û:', md.bold(data['name']), "\n"),
                    md.text('–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:\n', md.code(data['number']), "\n"),
                    md.text('–¢–∏–ø –∫–∞—Ä—Ç—ã: \n', md.code(cards[data['card']])),
                    sep='\n',
                ),
                reply_markup=confirm_keyboard(),
                parse_mode=ParseMode.MARKDOWN,
            )
        except:
            await bot.send_message(
                message.chat.id, "–ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ä—Ç—É –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ —Ä–∞–∑", reply_markup=return_keyboard())

    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'confirm')
async def process_callback_menu(callback_query: types.CallbackQuery):
    print("–¢—ã–∫ 21 " + str(callback_query.chat_instance))
    try:
        sl["id"] = str(callback_query.chat_instance)
        print(df)
        print([sl["name"], sl["number"], cards[sl["card"]]])
        df.loc[str(sl["id"])+" "+str(sl["card"])] = [sl["name"], sl["number"], cards[sl["card"]]]
        print(df)
        df.to_csv("users.csv")
        await bot.answer_callback_query(callback_query.id)
        await bot.send_message(callback_query.from_user.id, "üü° –í—ã —É—Å–ø–µ—à–Ω–æ –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç! \
        \n–°—Å—ã–ª–∫–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—á–µ—Ç–∞:  https://www.tinkoff.ru/sl/3wJZvX6czp", reply_markup=start_keyboard())
    except:
        await bot.send_message(callback_query.from_user.id, "–ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ä—Ç—É –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –µ—â–µ —Ä–∞–∑", reply_markup=return_keyboard())

@dp.callback_query_handler(lambda c: c.data == 'change')
async def process_callback_button1(callback_query: types.CallbackQuery):
    print("–¢—ã–∫ 22 " + str(callback_query.chat_instance))
    await bot.answer_callback_query(callback_query.id)
    await Form.name.set()
    await bot.send_message(callback_query.from_user.id, text["inputname"])

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
